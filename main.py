import os
import json
import asyncio
import schedule
import time
import threading
import openai
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")
openai.api_key = os.getenv("OPENAI_API_KEY")

# –ú–∏–Ω–∏-—Ä–æ–∞–¥–º–∞–ø
roadmap = [
    {"day": 1, "theme": "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç LLM", "goal": "–ü–æ–Ω—è—Ç—å —Ç–æ–∫–µ–Ω—ã, –∫–æ–Ω—Ç–µ–∫—Å—Ç, –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"},
    {"day": 2, "theme": "–ß—Ç–æ —Ç–∞–∫–æ–µ –ø—Ä–æ–º–ø—Ç", "goal": "–£–∑–Ω–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ —Ç–∏–ø—ã –ø—Ä–æ–º–ø—Ç–æ–≤"},
    {"day": 3, "theme": "Zero-shot –∏ few-shot", "goal": "–°—Ç—Ä–æ–∏—Ç—å –∫—Ä–∞—Ç–∫–∏–µ –∏ —è—Å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã"},
    {"day": 4, "theme": "Chain-of-Thought", "goal": "–£–º–µ—Ç—å –∑–∞–¥–∞–≤–∞—Ç—å –ø–æ—à–∞–≥–æ–≤—ã–µ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è"},
    {"day": 5, "theme": "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, —Ç–æ–ø-p", "goal": "–£–ø—Ä–∞–≤–ª—è—Ç—å –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å—é –º–æ–¥–µ–ª–∏"},
    {"day": 6, "theme": "–†–æ–ª–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç", "goal": "–ù–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ò–ò –≤ —Ä–æ–ª–∏"},
    {"day": 7, "theme": "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏ —Ñ–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞", "goal": "–£–∫–∞–∑—ã–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞, bullet points, —Ç–∞–±–ª–∏—Ü—ã"},
    {"day": 8, "theme": "–ì–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏–∏ –∏ –∏—Ö –ø—Ä–∏—á–∏–Ω—ã", "goal": "–ù–∞—É—á–∏—Ç—å—Å—è –∏—Ö –ª–æ–≤–∏—Ç—å –∏ —Å–Ω–∏–∂–∞—Ç—å"},
    {"day": 9, "theme": "–ü–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç—å –ø—Ä–æ–º–ø—Ç–æ–≤", "goal": "–î–µ–ª–∞—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"},
    {"day": 10, "theme": "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–æ–≤", "goal": "–ü—Ä–æ–≤–µ—Ä—è—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏ –Ω–∞—Ö–æ–¥–∏—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π"},
    {"day": 11, "theme": "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è", "goal": "–í—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –∑–∞—â–∏—Ç—É –æ—Ç –ø–ª–æ—Ö–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"},
    {"day": 12, "theme": "–ú–Ω–æ–≥–æ—à–∞–≥–æ–≤—ã–µ —Ü–µ–ø–æ—á–∫–∏", "goal": "–î–µ–ª–∞—Ç—å –ø—Ä–æ–º–ø—Ç—ã, –∑–∞–≤–∏—Å—è—â–∏–µ –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö"},
    {"day": 13, "theme": "–•—Ä–∞–Ω–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ", "goal": "–°–æ—Ö—Ä–∞–Ω—è—Ç—å —à–∞–±–ª–æ–Ω—ã –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫–∏"},
    {"day": 14, "theme": "–ú–µ–º–Ω—ã–π –¥–µ–Ω—å üéâ", "goal": "–û—Ç–¥–æ—Ö–Ω—É—Ç—å –∏ –∑–∞–∫—Ä–µ–ø–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª —á–µ—Ä–µ–∑ –º–µ–º—ã –∏ —Å–º–µ—à–Ω—ã–µ –∫–µ–π—Å—ã"},
]

PROGRESS_FILE = "progress.json"

def load_progress():
    if os.path.exists(PROGRESS_FILE):
        with open(PROGRESS_FILE, "r") as f:
            return json.load(f)
    return {"day": 1, "status": {}}

def save_progress(data):
    with open(PROGRESS_FILE, "w") as f:
        json.dump(data, f)

async def get_meme_quote_from_gpt():
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢—ã ‚Äî –≥–µ–Ω–∏–∞–ª—å–Ω—ã–π, —Å–ª–µ–≥–∫–∞ –¥–µ—Ä–∑–∫–∏–π –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ—É—á."},
                {"role": "user", "content": "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫–æ—Ä–æ—Ç–∫—É—é –º–µ–º–Ω–æ-–º–æ—Ç–∏–≤–∏—Ä—É—é—â—É—é —Ü–∏—Ç–∞—Ç—É."}
            ],
            max_tokens=60,
            temperature=1.2,
        )
        return response["choices"][0]["message"]["content"]
    except:
        return "üî• –î–∞–∂–µ –µ—Å–ª–∏ –º–æ—Ç–∏–≤–∞—Ü–∏—è –Ω–µ –ø—Ä–∏—à–ª–∞ ‚Äî —Ç—ã –º–æ–∂–µ—à—å –µ—ë —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º!"

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
async def morning_routine(app):
    progress = load_progress()
    day = progress["day"]
    theme = roadmap[day - 1]["theme"]
    goal = roadmap[day - 1]["goal"]
    yesterday = roadmap[day - 2]["theme"] if day > 1 else "–¢—ã —Ç–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞–µ—à—å!"

    await app.bot.send_message(chat_id=CHAT_ID, text=(
        f"üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, –≤–æ–∏–Ω –∑–Ω–∞–Ω–∏—è!\n\n"
        f"üß† –í—á–µ—Ä–∞: *{yesterday}*\n"
        f"üî• –°–µ–≥–æ–¥–Ω—è: *{theme}*\n"
        f"üéØ –ó–∞—á–µ–º: {goal}\n\n"
        f"‚öîÔ∏è *–í–ø–µ—Ä—ë–¥, –õ–æ—Ä–¥ –û–±—É—á–µ–Ω–∏–π –∂–¥—ë—Ç –æ—Ç —Ç–µ–±—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã!*"
    ), parse_mode="Markdown")

    await app.bot.send_message(chat_id=CHAT_ID, text="ü§ñ –£—á–µ–Ω–∏–µ —Ç—è–∂–µ–ª–æ, –Ω–æ —Ç—ã –Ω–µ –≤ –∫–∞—á–∞–ª–∫–µ ‚Äî —Ç—ã –≤ –±–∏—Ç–≤–µ —Å –ª–µ–Ω–∏–≤—ã–º –º–æ–∑–≥–æ–º.")
    meme = await get_meme_quote_from_gpt()
    await app.bot.send_message(chat_id=CHAT_ID, text=f"ü§ñ {meme}")

async def day_check(app):
    progress = load_progress()
    day = progress["day"]
    status = progress["status"].get(str(day), "–Ω–µ –æ—Ç–º–µ—á–µ–Ω–æ")

    msg = "‚úÖ –£–∂–µ —É—á–∏–ª—Å—è —Å–µ–≥–æ–¥–Ω—è. –ö—Ä–∞—Å–∞–≤–∞!" if status == "done" else "üëÄ –¢—ã –µ—â—ë –Ω–µ —Å–µ–ª –∑–∞ —É—á—ë–±—É. –ù–∞–ø–∏—à–∏ /study ‚Äî –∏ –º—ã —ç—Ç–æ –∑–∞—Ñ–∏–∫—Å–∏—Ä—É–µ–º!"
    await app.bot.send_message(chat_id=CHAT_ID, text=msg)

async def evening_motivation(app):
    progress = load_progress()
    total = len(roadmap)
    day = progress["day"]
    await app.bot.send_message(chat_id=CHAT_ID, text=(
        f"üåô –î–µ–Ω—å {day} –∏–∑ {total} –∑–∞–≤–µ—Ä—à—ë–Ω.\n"
        f"üî• –¢—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞—á–∞–ª ‚Äî —Ç—ã –∏–¥—ë—à—å –¥–æ –∫–æ–Ω—Ü–∞. –ü—Ä–æ–¥–æ–ª–∂–∞–π!"
    ))
    meme = await get_meme_quote_from_gpt()
    await app.bot.send_message(chat_id=CHAT_ID, text=f"üåå {meme}")

def start_scheduler(app):
    def run():
        schedule.every().day.at("11:00").do(lambda: asyncio.run(morning_routine(app)))
        schedule.every().day.at("15:00").do(lambda: asyncio.run(day_check(app)))
        schedule.every().day.at("19:00").do(lambda: asyncio.run(evening_motivation(app)))
        while True:
            schedule.run_pending()
            time.sleep(30)

    threading.Thread(target=run, daemon=True).start()

# –ö–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –õ–æ—Ä–¥ –û–±—É—á–µ–Ω–∏–π. –ü–∏—à–∏ /study, /progress –∏–ª–∏ /next!")

async def ping(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üèì Pong!")

async def mark_done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    progress = load_progress()
    today = progress["day"]
    progress["status"][str(today)] = "done"
    save_progress(progress)
    await update.message.reply_text("‚úÖ –£—á—ë–±–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞!")

async def show_progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    progress = load_progress()
    current_day = progress["day"]
    done_days = [int(d) for d, s in progress["status"].items() if s == "done"]
    total_days = len(roadmap)
    theme = roadmap[current_day - 1]["theme"]
    percent = round(len(done_days) / total_days * 100)
    bar = "‚ñì" * (percent // 10) + "‚ñë" * (10 - (percent // 10))

    msg = (
        f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è\n\n"
        f"üìÖ –°–µ–≥–æ–¥–Ω—è: –¥–µ–Ω—å {current_day} –∏–∑ {total_days}\n"
        f"üß† –¢–µ–º–∞: *{theme}*\n"
        f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {len(done_days)}\n"
        f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: `{bar}` {percent}%\n"
    )
    await update.message.reply_text(msg, parse_mode="Markdown")

async def go_to_next_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    progress = load_progress()
    current_day = progress["day"]
    total_days = len(roadmap)
    progress["status"][str(current_day)] = "done"

    if current_day < total_days:
        progress["day"] += 1
        next_theme = roadmap[progress["day"] - 1]["theme"]
        save_progress(progress)
        await update.message.reply_text(f"‚è≠ –ü–µ—Ä–µ—à–ª–∏ –∫ –¥–Ω—é {progress['day']}!\nüß† –¢–µ–º–∞: *{next_theme}*", parse_mode="Markdown")
    else:
        await update.message.reply_text("üéâ –í—Å—ë –ø—Ä–æ–π–¥–µ–Ω–æ! –¢—ã –º–æ–ª–æ–¥–µ—Ü!")

# Main
async def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("ping", ping))
    app.add_handler(CommandHandler("study", mark_done))
    app.add_handler(CommandHandler("progress", show_progress))
    app.add_handler(CommandHandler("next", go_to_next_day))

    start_scheduler(app)
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    await app.run_polling()

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    import nest_asyncio
    nest_asyncio.apply()
    asyncio.run(main())
